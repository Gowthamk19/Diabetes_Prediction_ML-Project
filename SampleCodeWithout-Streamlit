# -*- coding: utf-8 -*-
"""PredictingDiabetes.ipynb

Automatically generated by Colab.
The dependencies to import
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split #To testing and trainig the datas by spliting
from sklearn.preprocessing import StandardScaler #To standardize our data
from sklearn import svm #Support Vector Machine
from sklearn.metrics import accuracy_score

"""Data Collection and Analysis
PIMA diabetes dataset
"""

#loading diabetes data set
diabetes_dataset=pd.read_csv('/content/diabetes.csv')

pd.read_csv?

diabetes_dataset.head()

diabetes_dataset.shape

diabetes_dataset.describe()

"""Here, 0-->Non Diabetes.
      1-->Diabetes.
"""

diabetes_dataset['Outcome'].value_counts()

"""If the glucose mean value is high they have diabetes"""

diabetes_dataset.groupby('Outcome').mean()

#Creating the variable to seperate data and lables
X=diabetes_dataset.drop(columns = 'Outcome' ,axis=1)
Y=diabetes_dataset['Outcome']

print(X)
print(Y)

"""Data standardization"""

scaler=StandardScaler()

scaler.fit(X)

standardized_data=scaler.transform(X)

print(standardized_data)

X=standardized_data
#Y=diabetes_dataset['Outcome'] -->It is to training our dataset

print(X)
print(Y)

"""We are Using train_test_split function to train the data."""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, stratify=Y, random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""Model training"""

classifier = svm.SVC(kernel='linear')

"""Support vector machine training"""

classifier.fit(X_train,Y_train)

"""Model Evaluation

Accuracy Score
"""

#comparing the X_train_prediction to a original model of Y_train
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)

print("Accuracy Score Of The Training Data: ",training_data_accuracy)

X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)

print("Accuracy Score Of The Testing Data: ",test_data_accuracy)

"""Making a Predictive System"""

input_data = (7,147,76,0,0,39.4,0.257,43)

#changing the input_data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the array as we are predicting for one instance --> It is reshaped to tell Ml to "There is More data But , we want to predict only one data we are given."
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

#standardizing the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

#Let's make the pediction
prediction = classifier.predict(std_data)
print(prediction)

if(prediction[0]== 0):
  print("The Person Has No Diabetes.")
else:
  print("The Person Has Diabetes.")

